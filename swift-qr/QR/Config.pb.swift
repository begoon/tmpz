// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Iproov_Ingress_Config_Platform: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// URL of the platform like https://eu.ingress.iproov.io
  var url: String = String()

  /// API key for the kiosk on that platform
  var apiKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Iproov_Ingress_Config_RemoteEndpoint: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// URL of the broker like wss://eu.ingress.iproov.io:8080
  var brokerURL: String = String()

  /// Namespace for the kiosk
  var namespace: String = String()

  /// URL of the imagery server like wss://eu.ingress.iproov.io/epp
  var serverURL: String = String()

  /// Device ID for the imagery server (like alwaysPass, LAXSBE001 etc)
  var serverDeviceID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Iproov_Ingress_Config_KioskConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the config
  var configVersion: UInt32 = 0

  /// Base platform on which to connect
  var platform: Iproov_Ingress_Config_Platform {
    get {return _platform ?? Iproov_Ingress_Config_Platform()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  /// Endpoint on the platform on which to connect
  var remoteEndpoint: Iproov_Ingress_Config_RemoteEndpoint {
    get {return _remoteEndpoint ?? Iproov_Ingress_Config_RemoteEndpoint()}
    set {_remoteEndpoint = newValue}
  }
  /// Returns true if `remoteEndpoint` has been explicitly set.
  var hasRemoteEndpoint: Bool {return self._remoteEndpoint != nil}
  /// Clears the value of `remoteEndpoint`. Subsequent reads from it will return its default value.
  mutating func clearRemoteEndpoint() {self._remoteEndpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _platform: Iproov_Ingress_Config_Platform? = nil
  fileprivate var _remoteEndpoint: Iproov_Ingress_Config_RemoteEndpoint? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "iproov.ingress.config"

extension Iproov_Ingress_Config_Platform: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Platform"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "api_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.apiKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.apiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.apiKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Iproov_Ingress_Config_Platform, rhs: Iproov_Ingress_Config_Platform) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.apiKey != rhs.apiKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iproov_Ingress_Config_RemoteEndpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoteEndpoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "broker_url"),
    2: .same(proto: "namespace"),
    3: .standard(proto: "server_url"),
    4: .standard(proto: "server_device_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.brokerURL) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serverURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serverDeviceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.brokerURL.isEmpty {
      try visitor.visitSingularStringField(value: self.brokerURL, fieldNumber: 1)
    }
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 2)
    }
    if !self.serverURL.isEmpty {
      try visitor.visitSingularStringField(value: self.serverURL, fieldNumber: 3)
    }
    if !self.serverDeviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.serverDeviceID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Iproov_Ingress_Config_RemoteEndpoint, rhs: Iproov_Ingress_Config_RemoteEndpoint) -> Bool {
    if lhs.brokerURL != rhs.brokerURL {return false}
    if lhs.namespace != rhs.namespace {return false}
    if lhs.serverURL != rhs.serverURL {return false}
    if lhs.serverDeviceID != rhs.serverDeviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iproov_Ingress_Config_KioskConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KioskConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_version"),
    2: .same(proto: "platform"),
    3: .standard(proto: "remote_endpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.configVersion) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._platform) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._remoteEndpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.configVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.configVersion, fieldNumber: 1)
    }
    try { if let v = self._platform {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._remoteEndpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Iproov_Ingress_Config_KioskConfig, rhs: Iproov_Ingress_Config_KioskConfig) -> Bool {
    if lhs.configVersion != rhs.configVersion {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._remoteEndpoint != rhs._remoteEndpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
